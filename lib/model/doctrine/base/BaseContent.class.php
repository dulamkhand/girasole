<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Content', 'doctrine');

/**
 * BaseContent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $type
 * @property integer $category_id
 * @property string $category_name
 * @property string $title
 * @property string $cover
 * @property integer $cover_width
 * @property string $intro
 * @property string $body
 * @property string $source
 * @property integer $sort
 * @property integer $nb_views
 * @property integer $is_active
 * @property integer $is_featured
 * @property string $view_list
 * @property string $view_detail
 * @property timestamp $created_at
 * 
 * @method integer   getId()            Returns the current record's "id" value
 * @method string    getType()          Returns the current record's "type" value
 * @method integer   getCategoryId()    Returns the current record's "category_id" value
 * @method string    getCategoryName()  Returns the current record's "category_name" value
 * @method string    getTitle()         Returns the current record's "title" value
 * @method string    getCover()         Returns the current record's "cover" value
 * @method integer   getCoverWidth()    Returns the current record's "cover_width" value
 * @method string    getIntro()         Returns the current record's "intro" value
 * @method string    getBody()          Returns the current record's "body" value
 * @method string    getSource()        Returns the current record's "source" value
 * @method integer   getSort()          Returns the current record's "sort" value
 * @method integer   getNbViews()       Returns the current record's "nb_views" value
 * @method integer   getIsActive()      Returns the current record's "is_active" value
 * @method integer   getIsFeatured()    Returns the current record's "is_featured" value
 * @method string    getViewList()      Returns the current record's "view_list" value
 * @method string    getViewDetail()    Returns the current record's "view_detail" value
 * @method timestamp getCreatedAt()     Returns the current record's "created_at" value
 * @method Content   setId()            Sets the current record's "id" value
 * @method Content   setType()          Sets the current record's "type" value
 * @method Content   setCategoryId()    Sets the current record's "category_id" value
 * @method Content   setCategoryName()  Sets the current record's "category_name" value
 * @method Content   setTitle()         Sets the current record's "title" value
 * @method Content   setCover()         Sets the current record's "cover" value
 * @method Content   setCoverWidth()    Sets the current record's "cover_width" value
 * @method Content   setIntro()         Sets the current record's "intro" value
 * @method Content   setBody()          Sets the current record's "body" value
 * @method Content   setSource()        Sets the current record's "source" value
 * @method Content   setSort()          Sets the current record's "sort" value
 * @method Content   setNbViews()       Sets the current record's "nb_views" value
 * @method Content   setIsActive()      Sets the current record's "is_active" value
 * @method Content   setIsFeatured()    Sets the current record's "is_featured" value
 * @method Content   setViewList()      Sets the current record's "view_list" value
 * @method Content   setViewDetail()    Sets the current record's "view_detail" value
 * @method Content   setCreatedAt()     Sets the current record's "created_at" value
 * 
 * @package    vogue
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseContent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('content');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('category_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('category_name', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('cover', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('cover_width', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('intro', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('body', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('source', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('sort', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('nb_views', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('is_active', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('is_featured', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('view_list', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('view_detail', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}